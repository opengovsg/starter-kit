// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Since we want to use Prisma Migrate, specify a URL for the Prisma shadow database
  // https://neon.tech/docs/guides/prisma/#configure-a-shadow-database-for-prisma-migrate
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String?      @db.Text
  content     String       @db.Text
  contentHtml String       @map("content_html") @db.Text
  hidden      Boolean      @default(false)
  published   Boolean      @default(true)
  anonymous   Boolean      @default(false)
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String       @map("author_id")
  likedBy     LikedPosts[]
  readBy      ReadPosts[]
  comments    Comment[]
  // To return `Date`s intact through the API we use transformers
  // https://trpc.io/docs/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")

  @@index([authorId])
}

model ReadPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int      @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String   @map("user_id")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int      @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @map("content_html") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int      @map("post_id")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @map("author_id")

  @@index([authorId])
  @@index([postId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  title         String?
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  ReadPosts     ReadPosts[]
}
