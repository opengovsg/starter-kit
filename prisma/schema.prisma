// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model Post {
  id           String       @id @default(cuid())
  title        String?      @db.Text
  content      String       @db.Text
  contentHtml  String       @map("content_html") @db.Text
  authorId     String       @map("author_id")
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes        LikedPosts[]
  readBy       ReadPosts[]
  // This features the self-relation Prisma concept, specifically a one-to-many self relation.
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations
  parentPostId String?      @map("parent_post_id")
  // The parent post of this post, if it is a reply.
  // @relation("PostToParent") is the name of the relation. See relation documentation below for more info.
  parent       Post?        @relation("PostReplies", fields: [parentPostId], references: [id])
  // The replies to this post.
  replies      Post[]       @relation("PostReplies")

  // To return `Date`s intact through the API we use transformers
  // https://trpc.io/docs/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@index([parentPostId])
  @@index([parentPostId, deletedAt, id])
  @@index([deletedAt])
  @@index([createdAt])
}

model ReadPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String   @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String   @map("user_id")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([postId, userId])
  @@index([postId])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String   @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([postId, userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  bio           String?
  posts         Post[]
  likedPosts    LikedPosts[]
  readPosts     ReadPosts[]
  accounts      Accounts[]
}

model Accounts {
  id                String @id @default(cuid())
  provider          String
  providerAccountId String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}
